import csv
import hashlib

# Define a SHA-256 class
#-------------------------------------------------------------------
# SHA256()
#-------------------------------------------------------------------
class SHA256():
    def __init__(self, mode="sha256", verbose = 0):
        if mode not in ["sha224", "sha256"]:
            print("Error: Given %s is not a supported mode." % mode)
            return 0

        self.mode = mode
        self.verbose = verbose
        self.H = [0] * 8
        self.t1 = 0
        self.t2 = 0
        self.a = 0
        self.b = 0
        self.c = 0
        self.d = 0
        self.e = 0
        self.f = 0
        self.g = 0
        self.h = 0
        self.w = 0
        self.W = [0] * 16
        self.k = 0
        self.K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
                  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
                  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
                  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
                  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
                  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
                  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
                  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
                  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
                  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
                  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
                  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
                  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
                  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
                  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
                  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]


    def init(self):
        if self.mode == "sha256":
            self.H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
                      0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]
        else:
            self.H = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
                      0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]

    def next(self, block):
        self._W_schedule(block)
        self._copy_digest()
        if self.verbose:
            print("State after init:")
            self._print_state(0)

        for i in range(64):
            self._sha256_round(i)
            if self.verbose:
                self._print_state(i)

        self._update_digest()


    def get_digest(self):
        return self.H


    def _copy_digest(self):
        self.a = self.H[0]
        self.b = self.H[1]
        self.c = self.H[2]
        self.d = self.H[3]
        self.e = self.H[4]
        self.f = self.H[5]
        self.g = self.H[6]
        self.h = self.H[7]


    def _update_digest(self):
        self.H[0] = (self.H[0] + self.a) & 0xffffffff
        self.H[1] = (self.H[1] + self.b) & 0xffffffff
        self.H[2] = (self.H[2] + self.c) & 0xffffffff
        self.H[3] = (self.H[3] + self.d) & 0xffffffff
        self.H[4] = (self.H[4] + self.e) & 0xffffffff
        self.H[5] = (self.H[5] + self.f) & 0xffffffff
        self.H[6] = (self.H[6] + self.g) & 0xffffffff
        self.H[7] = (self.H[7] + self.h) & 0xffffffff


    def _print_state(self, round):
        print("State at round 0x%02x:" % round)
        print("t1 = 0x%08x, t2 = 0x%08x" % (self.t1, self.t2))
        print("k  = 0x%08x, w  = 0x%08x" % (self.k, self.w))
        print("a  = 0x%08x, b  = 0x%08x" % (self.a, self.b))
        print("c  = 0x%08x, d  = 0x%08x" % (self.c, self.d))
        print("e  = 0x%08x, f  = 0x%08x" % (self.e, self.f))
        print("g  = 0x%08x, h  = 0x%08x" % (self.g, self.h))
        print("")


    def _sha256_round(self, round):
        self.k = self.K[round]
        self.w = self._next_w(round)
        self.t1 = self._T1(self.e, self.f, self.g, self.h, self.k, self.w)
        self.t2 = self._T2(self.a, self.b, self.c)
        self.h = self.g
        self.g = self.f
        self.f = self.e
        self.e = (self.d + self.t1) & 0xffffffff
        self.d = self.c
        self.c = self.b
        self.b = self.a
        self.a = (self.t1 + self.t2) & 0xffffffff


    def _next_w(self, round):
        if (round < 16):
            return self.W[round]

        else:
            tmp_w = (self._delta1(self.W[14]) +
                     self.W[9] +
                     self._delta0(self.W[1]) +
                     self.W[0]) & 0xffffffff
            for i in range(15):
                self.W[i] = self.W[(i+1)]
            self.W[15] = tmp_w
            return tmp_w


    def _W_schedule(self, block):
        for i in range(16):
            self.W[i] = block[i]


    def _Ch(self, x, y, z):
        return (x & y) ^ (~x & z)


    def _Maj(self, x, y, z):
        return (x & y) ^ (x & z) ^ (y & z)

    def _sigma0(self, x):
        return (self._rotr32(x, 2) ^ self._rotr32(x, 13) ^ self._rotr32(x, 22))


    def _sigma1(self, x):
        return (self._rotr32(x, 6) ^ self._rotr32(x, 11) ^ self._rotr32(x, 25))


    def _delta0(self, x):
        return (self._rotr32(x, 7) ^ self._rotr32(x, 18) ^ self._shr32(x, 3))


    def _delta1(self, x):
        return (self._rotr32(x, 17) ^ self._rotr32(x, 19) ^ self._shr32(x, 10))


    def _T1(self, e, f, g, h, k, w):
        return (h + self._sigma1(e) + self._Ch(e, f, g) + k + w) & 0xffffffff


    def _T2(self, a, b, c):
        return (self._sigma0(a) + self._Maj(a, b, c)) & 0xffffffff


    def _rotr32(self, n, r):
        return ((n >> r) | (n << (32 - r))) & 0xffffffff


    def _shr32(self, n, r):
        return (n >> r)


#-------------------------------------------------------------------
# print_digest()
#
# Print the given digest.
#-------------------------------------------------------------------
def print_digest(digest, length = 8):
    print("0x%08x, 0x%08x, 0x%08x, 0x%08x" %\
          (digest[0], digest[1], digest[2], digest[3]))
    if length == 8:
        print("0x%08x, 0x%08x, 0x%08x, 0x%08x" %\
            (digest[4], digest[5], digest[6], digest[7]))
    else:
        print("0x%08x, 0x%08x, 0x%08x" %\
            (digest[4], digest[5], digest[6]))
    print("")


#-------------------------------------------------------------------
# compare_digests()
#
# Check that the given digest matches the expected digest.
#-------------------------------------------------------------------
def compare_digests(digest, expected, length = 8):
    correct = True
    for i in range(length):
        if digest[i] != expected[i]:
            correct = False

    if (not correct):
        print("Error:")
        print("Got:")
        print_digest(digest, length)
        print("Expected:")
        print_digest(expected, length)

    else:
        print("Test case ok.")


def hash_format(input_string):
    input_block = []
    n = 8
    for i in range(0, len(input_string), n):
        input_block.append(int("0x" + input_string[i:i+n],16))
    return input_block

def hash_unformat(input_array=[]):

    inside_array = input_array
    output_string = ""
    for i in range(0,16,1):
        output_string += str(inside_array[i])
    return output_string

# F Computes SHA-256 hash of the input string
def F(input_string):

    my_sha256 = SHA256(verbose=0)
    my_sha256.init()

    formatted_input = hash_format(input_string)

    my_sha256.next(formatted_input)


    return my_sha256.get_digest()

# PRF hashes a seed connected with an index
def PRF(seed, index):
    my_sha256 = SHA256(verbose=0)
    my_sha256.init()
    formatted_input = hash_format(seed)
    my_sha256.next(formatted_input)
    return my_sha256.get_digest()


# His  Another wrapper for SHA-256 hash
def H(value):
    my_sha256 = SHA256(verbose=0)
    my_sha256.init()
    formatted_input = hash_format(value)
    my_sha256.next(formatted_input)
    return my_sha256.get_digest()


# Chain function: Applies F iteratively for s times starting from X
def chain(X, i, s):
    tmp = X  # Initialize temporary value with input X
    for _ in range(i, i + s):  # Loop s times
        tmp = F(tmp)  # Apply function F iteratively
    return tmp  # Return final chained value

# WOTS public key generation function
def wots_pkGen(SK_seed, w, length):
    temp = []  # Initialize empty list to store key parts
    for i in range(length):  # Iterate through the given length
        sk = PRF(SK_seed, i)  # Generate private key using PRF
        temp.append(chain(sk, 0, w - 1))  # Compute chain function and store result
    return ''.join(temp)  # Return connected result as public key

# XMSS tree node computation
def xmss_node(SK_seed, i, z):
    if z == 0:
        return wots_pkGen(SK_seed, 16, 32)  # Generate WOTS public key at leaf node
    else:
        lnode = xmss_node(SK_seed, 2 * i, z - 1)  # Compute left subtree node
        rnode = xmss_node(SK_seed, 2 * i + 1, z - 1)  # Compute right subtree node
        return H(lnode + rnode)  # Hash connected left and right nodes

# XMSS signature generation function
def xmss_sign(M, SK_seed, idx, h=10):
    AUTH = []  # Initialize authentication path list
    for j in range(h):  # Iterate over tree height
        k = (idx // (2 ** j)) ^ 1  # Compute sibling node index
        AUTH.append(xmss_node(SK_seed, k, j))  # Store authentication node
    sig = [F(str(M) + str(i)) for i in range(10)]  # Generate signature using F function
    return (sig, AUTH)  # Return signature and authentication path

# Main function
def main():

    # my_sha256 = SHA256(verbose=0)
    # my_sha256.init()
    #


    input = "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001"
    #
    # formatted_input = hash_format(input)
    #
    # my_sha256.next(formatted_input)
    # my_digest = my_sha256.get_digest()
    # print_digest(my_digest)
    #
    # formatted = hash_format(input)
    #
    # print(formatted)
    #
    # print("")
    #
    # print(formatted[7])
    #
    # unformatted = hash_unformat(formatted)
    #
    # print(unformatted)


    f_test = F(input)
    print_digest(f_test)

    # print("")
    #
    # prf_test = PRF(input,9)
    # print_digest(prf_test)
    #
    # print("")
    #
    # h_test = H(input)
    # print_digest(h_test)
    # print("")


    # input_string = input("Enter a string: ")  # Take user input
    # SK_seed = sha256.hash(input_string)  # Compute seed from input string
    # idx = int(hashlib.sha256(input_string.encode()).hexdigest(), 16) % (2 ** 10)  # Compute index from hash
    #
    # M = int(sha256.hash(input_string), 16) % (2 ** 256)  # Compute message hash modulo 2^256
    #
    # pub_key = xmss_node(SK_seed, 0, 10)  # Generate XMSS public key
    # SIG_XMSS = xmss_sign(M, SK_seed, idx)  # Generate XMSS signature
    # sig_str = ' '.join(SIG_XMSS[0])  # Convert signature list to string
    # auth_str = ' '.join(SIG_XMSS[1])  # Convert authentication path list to string
    # formatted_sig = f"{sig_str} {auth_str}"  # Concatenate signature and authentication path
    #
    # # Write the output to a CSV file
    # with open("xmss_output.csv", "w", newline='') as file:
    #     writer = csv.writer(file)
    #     writer.writerow(["Input String", "Public Key", "XMSS Signature"])  # Write headers
    #     writer.writerow([input_string, pub_key, formatted_sig])  # Write computed values

# Run main function if script is executed directly
if __name__ == "__main__":
    main()
